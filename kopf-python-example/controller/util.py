import kopf, yaml
from kubernetes import client, config

str_daemons = """
    # This file tells the frr package which daemons to start.
    #
    # Sample configurations for these daemons can be found in
    # /usr/share/doc/frr/examples/.
    #
    # ATTENTION:
    #
    # When activating a daemon for the first time, a config file, even if it is
    # empty, has to be present *and* be owned by the user and group "frr", else
    # the daemon will not be started by /etc/init.d/frr. The permissions should
    # be u=rw,g=r,o=.
    # When using "vtysh" such a config file is also needed. It should be owned by
    # group "frrvty" and set to ug=rw,o= though. Check /etc/pam.d/frr, too.
    #
    # The watchfrr and zebra daemons are always started.
    #
    bgpd=yes
    ospfd=no
    ospf6d=no
    ripd=no
    ripngd=no
    isisd=no
    pimd=no
    ldpd=no
    nhrpd=no
    eigrpd=no
    babeld=no
    sharpd=no
    pbrd=no
    bfdd=yes
    fabricd=no
    vrrpd=no

    #
    # If this option is set the /etc/init.d/frr script automatically loads
    # the config via "vtysh -b" when the servers are started.
    # Check /etc/pam.d/frr if you intend to use "vtysh"!
    #
    vtysh_enable=yes
    zebra_options="  -A 127.0.0.1 -s 90000000"
    bgpd_options="   -A 127.0.0.1 -p 0"
    ospfd_options="  -A 127.0.0.1"
    ospf6d_options=" -A ::1"
    ripd_options="   -A 127.0.0.1"
    ripngd_options=" -A ::1"
    isisd_options="  -A 127.0.0.1"
    pimd_options="   -A 127.0.0.1"
    ldpd_options="   -A 127.0.0.1"
    nhrpd_options="  -A 127.0.0.1"
    eigrpd_options=" -A 127.0.0.1"
    babeld_options=" -A 127.0.0.1"
    sharpd_options=" -A 127.0.0.1"
    pbrd_options="   -A 127.0.0.1"
    staticd_options="-A 127.0.0.1"
    bfdd_options="   -A 127.0.0.1"
    fabricd_options="-A 127.0.0.1"
    vrrpd_options="  -A 127.0.0.1"

    # configuration profile
    #
    #frr_profile="traditional"
    #frr_profile="datacenter"

    #
    # This is the maximum number of FD's that will be available.
    # Upon startup this is read by the control files and ulimit
    # is called. Uncomment and use a reasonable value for your
    # setup if you are expecting a large number of peers in
    # say BGP.
    #MAX_FDS=1024

    # The list of daemons to watch is automatically generated by the init script.
    #watchfrr_options=""

    # for debugging purposes, you can specify a "wrap" command to start instead
    # of starting the daemon directly, e.g. to use valgrind on ospfd:
    #   ospfd_wrap="/usr/bin/valgrind"
    # or you can use "all_wrap" for all daemons, e.g. to use perf record:
    #   all_wrap="/usr/bin/perf record --call-graph -"
    # the normal daemon command is added to this at the end.
"""

str_vtysh_conf = """
    service integrated-vtysh-config
"""

str_frr_conf = """
    ! This file gets overriden the first time the speaker renders a config.
    ! So anything configured here is only temporary.
    frr version 7.5.1
    frr defaults traditional
    hostname Router
    line vty
    log file /etc/frr/frr.log informational
"""

def get_bgp_cfg(spec):
    asn = spec['asNumber']

    cfg_body = f"\trouter bgp {asn}\n"

    for nbr in spec['neighbor']:
        cfg_nbr = f"\tneighbor {nbr} remote-as {asn}\n"
        cfg_body = cfg_body + cfg_nbr

    cfg_body = cfg_body + "\t!\n"
    return cfg_body.expandtabs(4)

def get_l2vpn_cfg(spec):
    cfg_body = "\taddress-family l2vpn evpn\n"

    for nbr in spec['neighbor']:
        cfg_nbr = f"\tneighbor {nbr} activate\n"
        cfg_body = cfg_body + cfg_nbr

    cfg_body = cfg_body + "\tadvertise-all-vni\n\texit-address-familly\n\t!"
    return cfg_body.expandtabs(4)

def create_frr_conf(spec):
    cfg_tail = """
    line vty
    frr defaults traditional
    log file /etc/frr/frr.log informational
    !
"""
    return get_bgp_cfg(spec) + get_l2vpn_cfg(spec) + cfg_tail

def create_cm_frr_cfg(spec, name, owner_ref):
    body = client.V1ConfigMap(metadata=client.V1ObjectMeta(
                    name=name, owner_references = owner_ref))

    body.api_version = 'v1'
    body.kind = 'ConfigMap'
    body.data = {
        'daemons'   : str_daemons,
        'vtysh.conf': str_vtysh_conf,
        'frr.conf'  : create_frr_conf(spec)
    }

    return body

def get_ds_frr_yaml(spec, name):
    image_name = spec["image"]

    return yaml.safe_load(f"""
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: {name}
  name: {name}-bgp-spkr
spec:
  selector:
    matchLabels:
      name: {name}
  template:
    metadata:
      labels:
        name: {name}
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - |
          /sbin/tini -- /usr/lib/frr/docker-start &
          attempts=0
          until [[ -f /etc/frr/frr.log || $attempts -eq 60 ]]; do
            sleep 1
            attempts=$(( $attempts + 1 ))
          done
          tail -f /etc/frr/frr.log
        image: {image_name}
        name: frr
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
            - SYS_ADMIN
            - NET_BIND_SERVICE
        volumeMounts:
        - mountPath: /var/run/frr
          name: frr-sockets
        - mountPath: /etc/frr
          name: frr-conf
      hostNetwork: true
      initContainers:
      - command:
        - /bin/sh
        - -c
        - cp -rLf /tmp/frr/* /etc/frr/
        image: {image_name}
        name: cp-frr-files
        securityContext:
          runAsGroup: 101
          runAsUser: 100
        volumeMounts:
        - mountPath: /tmp/frr
          name: frr-startup
        - mountPath: /etc/frr
          name: frr-conf
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: default
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 2
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      volumes:
      - emptyDir: {{}}
        name: frr-sockets
      - configMap:
          name: {name}-frr-startup
        name: frr-startup
      - emptyDir: {{}}
        name: frr-conf
""")

